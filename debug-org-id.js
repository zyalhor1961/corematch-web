// Script pour diagnostiquer le probl√®me org_id=undefined
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://glexllbywdvlxpbanjmn.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdsZXhsbGJ5d2R2bHhwYmFuam1uIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY0MTUyODQsImV4cCI6MjA3MTk5MTI4NH0.yPjfcN80XG4Kn1YhkCkgWfEqgHX_xFSOQohq2ZvdGns';

const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnosticOrgId() {
    console.log('=== DIAGNOSTIC ORG_ID ===\n');

    // 1. V√©rifier l'√©tat d'authentification
    console.log('1. √âtat d\'authentification:');
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError) {
        console.log('‚ùå Erreur auth:', authError);
        console.log('üîß Solution: Vous devez vous connecter √† l\'application d\'abord');
        return;
    }
    
    if (!user) {
        console.log('‚ùå Aucun utilisateur connect√©');
        console.log('üîß Solution: Connectez-vous √† l\'application CoreMatch d\'abord');
        return;
    }
    
    console.log('‚úì Utilisateur connect√©:', user.email);
    console.log('‚úì User ID:', user.id);

    // 2. V√©rifier les organisations via la vue my_orgs
    console.log('\n2. Test de la vue my_orgs:');
    const { data: orgs, error: orgsError } = await supabase
        .from('my_orgs')
        .select('*');
    
    if (orgsError) {
        console.log('‚ùå Erreur my_orgs:', orgsError);
    } else {
        console.log('‚úì Organisations trouv√©es:', orgs?.length || 0);
        if (orgs && orgs.length > 0) {
            orgs.forEach(org => {
                console.log(`  - ${org.org_name} (ID: ${org.id})`);
            });
        }
    }

    // 3. V√©rifier toutes les organisations (pour debug)
    console.log('\n3. Toutes les organisations dans la DB:');
    const { data: allOrgs, error: allOrgsError } = await supabase
        .from('organizations')
        .select('id, name, admin_user_id');
    
    if (allOrgsError) {
        console.log('‚ùå Erreur organisations:', allOrgsError);
    } else {
        console.log('‚úì Total organisations:', allOrgs?.length || 0);
        allOrgs?.forEach(org => {
            const isOwner = org.admin_user_id === user.id;
            console.log(`  - ${org.name} (${isOwner ? 'üëë VOUS' : 'autre utilisateur'})`);
        });
    }

    // 4. Cr√©er une organisation si n√©cessaire
    if (!orgs || orgs.length === 0) {
        console.log('\n4. Cr√©ation d\'organisation automatique:');
        const { data: newOrg, error: createError } = await supabase
            .from('organizations')
            .insert({
                name: 'Mon Organisation CoreMatch',
                admin_user_id: user.id,
                description: 'Organisation cr√©√©e automatiquement',
                slug: `mon-org-${user.id.substring(0, 8)}`
            })
            .select()
            .single();
        
        if (createError) {
            console.log('‚ùå Erreur cr√©ation org:', createError);
        } else {
            console.log('‚úì Organisation cr√©√©e:', newOrg.id);
        }
    }

    // 5. Test final des API calls
    console.log('\n5. Test des appels API (comme fait par l\'application):');
    
    // R√©cup√©rer l'ID d'organisation
    const { data: myOrgs } = await supabase.from('my_orgs').select('id').single();
    
    if (myOrgs && myOrgs.id) {
        const orgId = myOrgs.id;
        console.log('‚úì Org ID r√©cup√©r√©:', orgId);
        
        // Test usage_counters
        const currentMonth = new Date().toISOString().substring(0, 7);
        const { data: usage, error: usageError } = await supabase
            .from('usage_counters')
            .select('*')
            .eq('org_id', orgId)
            .eq('period_month', currentMonth);
        
        if (usageError) {
            console.log('‚ùå Erreur usage_counters:', usageError);
        } else {
            console.log('‚úì usage_counters OK:', usage?.length || 0, 'records');
        }
        
        // Test projects
        const { data: projects, error: projectsError } = await supabase
            .from('projects')
            .select('*')
            .eq('org_id', orgId);
        
        if (projectsError) {
            console.log('‚ùå Erreur projects:', projectsError);
        } else {
            console.log('‚úì projects OK:', projects?.length || 0, 'records');
        }
        
    } else {
        console.log('‚ùå Impossible de r√©cup√©rer l\'org_id');
        console.log('üîß Solution: L\'application doit appeler my_orgs pour r√©cup√©rer l\'ID');
    }

    console.log('\n=== SOLUTION POUR L\'APPLICATION ===');
    console.log('1. Au login, faire: const { data } = await supabase.from("my_orgs").select("id").single()');
    console.log('2. Stocker data.id dans l\'√©tat de l\'application');
    console.log('3. Utiliser cet ID dans toutes les requ√™tes au lieu de undefined');
}

// Si le script est ex√©cut√© directement
if (require.main === module) {
    diagnosticOrgId().catch(console.error);
}

module.exports = { diagnosticOrgId };