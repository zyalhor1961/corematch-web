#!/bin/bash

################################################################################
# Script de nettoyage d'historique Git - Suppression secrets Supabase
################################################################################
#
# Ce script nettoie l'historique Git pour supprimer TOUTES les occurrences
# de la cl√© Supabase service-role compromise.
#
# ‚ö†Ô∏è ATTENTION : Cette op√©ration est DESTRUCTIVE et r√©√©crit l'historique Git.
#
# Pr√©requis :
# 1. La nouvelle cl√© Supabase doit √™tre g√©n√©r√©e
# 2. .env.mcp doit √™tre mis √† jour avec la nouvelle cl√©
# 3. L'ancienne cl√© doit √™tre r√©voqu√©e sur Supabase
#
# Utilisation :
#   bash clean-git-history.sh
#
################################################################################

set -e  # Exit on error

echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "üö® NETTOYAGE HISTORIQUE GIT - SUPPRESSION SECRETS SUPABASE"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo ""

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Variables
REPO_PATH="/f/corematch"
BACKUP_PATH="/f/corematch-backup-$(date +%Y%m%d-%H%M%S)"
REPLACE_FILE="replace-secrets.txt"
OLD_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdsZXhsbGJ5d2R2bHhwYmFuam1uIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjQxNTI4NCwiZXhwIjoyMDcxOTkxMjg0fQ.7nnnTWg974XtP704A-5FNSKglMK1iMLOmN0BQz9Pdok"

################################################################################
# 1. V√©rifications pr√©alables
################################################################################

echo "üìã √âtape 1/8 : V√©rifications pr√©alables..."
echo ""

# V√©rifier que replace-secrets.txt existe
if [ ! -f "$REPO_PATH/$REPLACE_FILE" ]; then
    echo -e "${RED}‚ùå ERREUR : Fichier $REPLACE_FILE introuvable${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Fichier $REPLACE_FILE trouv√©${NC}"

# V√©rifier que .env.mcp ne contient plus l'ancienne cl√©
if grep -q "$OLD_KEY" "$REPO_PATH/.env.mcp" 2>/dev/null; then
    echo -e "${RED}‚ùå ERREUR : .env.mcp contient encore l'ancienne cl√© compromise${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Veuillez d'abord mettre √† jour .env.mcp avec la NOUVELLE cl√© Supabase${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ .env.mcp ne contient plus l'ancienne cl√©${NC}"

# V√©rifier que git-filter-repo est install√©
if ! python -m git_filter_repo --version &>/dev/null; then
    echo -e "${RED}‚ùå ERREUR : git-filter-repo n'est pas install√©${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Installez-le avec : python -m pip install git-filter-repo${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ git-filter-repo install√©${NC}"

# V√©rifier qu'on est dans un repo git
cd "$REPO_PATH"
if [ ! -d ".git" ]; then
    echo -e "${RED}‚ùå ERREUR : Pas un d√©p√¥t Git${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ D√©p√¥t Git valide${NC}"

echo ""
echo -e "${YELLOW}‚ö†Ô∏è  AVERTISSEMENT :${NC}"
echo "   Cette op√©ration va R√â√âCRIRE tout l'historique Git."
echo "   Tous les commit SHAs vont changer."
echo "   Une sauvegarde sera cr√©√©e dans : $BACKUP_PATH"
echo ""
read -p "Voulez-vous continuer ? (oui/non) : " -r
echo ""
if [[ ! $REPLY =~ ^(oui|OUI|yes|YES)$ ]]; then
    echo "‚ùå Op√©ration annul√©e par l'utilisateur"
    exit 0
fi

################################################################################
# 2. Sauvegarde
################################################################################

echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "üì¶ √âtape 2/8 : Cr√©ation sauvegarde..."
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo ""

echo "Copie de $REPO_PATH vers $BACKUP_PATH..."
cp -r "$REPO_PATH" "$BACKUP_PATH"

if [ -d "$BACKUP_PATH" ]; then
    echo -e "${GREEN}‚úÖ Sauvegarde cr√©√©e : $BACKUP_PATH${NC}"
else
    echo -e "${RED}‚ùå ERREUR : √âchec cr√©ation sauvegarde${NC}"
    exit 1
fi

################################################################################
# 3. Sauvegarder les remotes
################################################################################

echo ""
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "üîó √âtape 3/8 : Sauvegarde configuration remotes..."
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo ""

git remote -v > "$REPO_PATH/.git-remotes-backup.txt"
echo -e "${GREEN}‚úÖ Remotes sauvegard√©s dans .git-remotes-backup.txt${NC}"

################################################################################
# 4. Nettoyage historique Git
################################################################################

echo ""
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "üßπ √âtape 4/8 : Nettoyage historique Git..."
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo ""

echo "‚è≥ Ex√©cution de git-filter-repo (peut prendre 1-5 minutes)..."
python -m git_filter_repo --replace-text "$REPLACE_FILE" --force

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Historique nettoy√© avec succ√®s${NC}"
else
    echo -e "${RED}‚ùå ERREUR lors du nettoyage${NC}"
    exit 1
fi

################################################################################
# 5. V√©rification suppression secrets
################################################################################

echo ""
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "üîç √âtape 5/8 : V√©rification suppression secrets..."
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo ""

# V√©rifier dans l'historique Git
COMMITS_WITH_SECRET=$(git log --all -S"$OLD_KEY" --oneline | wc -l)

if [ "$COMMITS_WITH_SECRET" -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Aucun commit ne contient plus la cl√© compromise${NC}"
else
    echo -e "${RED}‚ùå ATTENTION : $COMMITS_WITH_SECRET commits contiennent encore la cl√©${NC}"
    echo "Commits concern√©s :"
    git log --all -S"$OLD_KEY" --oneline
    exit 1
fi

# V√©rifier dans les fichiers actuels
FILES_WITH_SECRET=$(grep -r "$OLD_KEY" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.txt" --exclude="*.sh" 2>/dev/null | wc -l)

if [ "$FILES_WITH_SECRET" -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Aucun fichier ne contient plus la cl√© compromise${NC}"
else
    echo -e "${RED}‚ùå ATTENTION : $FILES_WITH_SECRET fichiers contiennent encore la cl√©${NC}"
    grep -r "$OLD_KEY" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.txt" --exclude="*.sh" 2>/dev/null
    exit 1
fi

################################################################################
# 6. Restauration remotes
################################################################################

echo ""
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "üîó √âtape 6/8 : Restauration remotes..."
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo ""

# git-filter-repo supprime les remotes par s√©curit√©, on doit les restaurer
git remote add origin https://github.com/zyalhor1961/corematch-web.git
echo -e "${GREEN}‚úÖ Remote 'origin' restaur√©${NC}"

git remote -v

################################################################################
# 7. Commit des suppressions
################################################################################

echo ""
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "üíæ √âtape 7/8 : Commit des fichiers supprim√©s..."
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo ""

# Ajouter les suppressions et le document d'incident
git add -A
git add INCIDENT_SECURITE_URGENT.md 2>/dev/null || true
git add replace-secrets.txt 2>/dev/null || true

git commit -m "security: Supprimer fichiers contenant cl√©s Supabase compromises

- Suppression NETTOYER_HISTORIQUE_GIT.md (contenait cl√© service-role)
- Suppression scripts/test-analyze-cv-mock.ts
- Suppression start-mcp-server.bat.backup
- Suppression fichiers markdown avec secrets
- Suppression backups compromis
- Ajout INCIDENT_SECURITE_URGENT.md (proc√©dure compl√®te)
- Nettoyage historique Git avec git-filter-repo

üîí Cl√© compromise r√©voqu√©e et remplac√©e
üìã Voir INCIDENT_SECURITE_URGENT.md pour d√©tails

ü§ñ Generated with [Claude Code](https://claude.com/claude-code)

Co-Authored-By: Claude <noreply@anthropic.com>"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Commit cr√©√©${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Pas de changements √† commiter${NC}"
fi

################################################################################
# 8. Instructions force push
################################################################################

echo ""
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "üöÄ √âtape 8/8 : Force push requis..."
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo ""

echo -e "${YELLOW}‚ö†Ô∏è  IMPORTANT :${NC}"
echo ""
echo "L'historique Git a √©t√© nettoy√© LOCALEMENT."
echo "Pour nettoyer l'historique sur GitHub, vous devez faire un FORCE PUSH."
echo ""
echo -e "${RED}‚ö†Ô∏è  DANGER :${NC}"
echo "   - Le force push va R√â√âCRIRE l'historique sur GitHub"
echo "   - Tous les collaborateurs devront re-cloner le repo"
echo "   - Les PRs ouvertes seront affect√©es"
echo ""
echo "Commandes √† ex√©cuter :"
echo ""
echo -e "${GREEN}   git push origin main --force --all${NC}"
echo -e "${GREEN}   git push origin --force --tags${NC}"
echo ""
echo "Apr√®s le force push :"
echo "1. Attendre 5-10 minutes que GitHub Secret Scanning re-scanne"
echo "2. V√©rifier sur https://github.com/zyalhor1961/corematch-web/security"
echo "3. R√©soudre les alertes manuellement si n√©cessaires"
echo ""
read -p "Voulez-vous ex√©cuter le force push MAINTENANT ? (oui/non) : " -r
echo ""

if [[ $REPLY =~ ^(oui|OUI|yes|YES)$ ]]; then
    echo "üöÄ Ex√©cution force push..."
    echo ""

    git push origin main --force --all

    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Force push r√©ussi${NC}"
        echo ""
        echo "Pushing tags..."
        git push origin --force --tags || echo -e "${YELLOW}‚ö†Ô∏è  Pas de tags √† pusher${NC}"
    else
        echo -e "${RED}‚ùå ERREUR lors du force push${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Force push non ex√©cut√©${NC}"
    echo "Ex√©cutez manuellement quand vous √™tes pr√™t :"
    echo "   git push origin main --force --all"
    echo "   git push origin --force --tags"
fi

################################################################################
# R√©sum√© final
################################################################################

echo ""
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "‚úÖ NETTOYAGE TERMIN√â"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo ""
echo "R√©sum√© :"
echo "  ‚úÖ Sauvegarde cr√©√©e : $BACKUP_PATH"
echo "  ‚úÖ Historique Git nettoy√© (git-filter-repo)"
echo "  ‚úÖ Secrets supprim√©s de TOUS les commits"
echo "  ‚úÖ Remotes restaur√©s"
echo "  ‚úÖ Commit de nettoyage cr√©√©"
echo ""
echo "Prochaines √©tapes :"
echo "  1. V√©rifier GitHub Security Alerts (5-10 min apr√®s force push)"
echo "  2. R√©soudre manuellement les alertes sur GitHub"
echo "  3. Red√©marrer serveur MCP avec nouvelle cl√©"
echo "  4. Tester fonctionnalit√©s (get-candidates, analyze-cv)"
echo ""
echo "Documentation compl√®te :"
echo "  üìÑ INCIDENT_SECURITE_URGENT.md"
echo "  üìÑ SECURITY_ENV_MCP.md"
echo ""
echo -e "${GREEN}üéâ Nettoyage r√©ussi !${NC}"
